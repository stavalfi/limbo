{
	"$schema": "https://biomejs.dev/schemas/2.0.0/schema.json",
	"vcs": {
		"enabled": true,
		"clientKind": "git",
		"useIgnoreFile": true
	},
	"files": {
		"ignoreUnknown": false
	},
	"formatter": {
		"enabled": true
	},
	"assist": { "actions": { "source": { "organizeImports": "off" } } },
	"linter": {
		"enabled": true,
		// to migrate from eslint to biome:
		// 1. go to here, find the eslint rule name: https://github.com/biomejs/website/blob/main/src/content/docs/linter/rules-sources.mdx
		// 2. then find the biome rule name and go here: https://biomejs.dev/linter/rules/ to find where to put it in this file
		"rules": {
			"recommended": false,
			"complexity": {
				"noUselessRename": "error",
				"noUselessStringConcat": "error",
				"useLiteralKeys": "off",
				"useFlatMap": "error",
				"noUselessLabel": "error",
				"useDateNow": "error",
				"noUselessEmptyExport": "error",
				"noUselessSwitchCase": "error",
				"noUselessCatch": "error",
				"noUselessTernary": "error",
				"noUselessEscapeInRegex": "off",
				"noCommaOperator": "error"
			},
			"nursery": {},
			"correctness": {
				"noUnusedImports": "off", // it has a bug: it omit used import when the file have a syntax error. so I use it only before commit
				"noUnusedLabels": "error",
				"noUnusedPrivateClassMembers": "error",
				"noUnusedVariables": "off",
				"noPrecisionLoss": "error",
				"noConstructorReturn": "error",
				"noInvalidUseBeforeDeclaration": "error",
				"useYield": "error",
				"useExhaustiveDependencies": "error",
				"useValidTypeof": "error"
			},
			"suspicious": {
				"noImplicitAnyLet": "error",
				"noAsyncPromiseExecutor": "error",
				"noDuplicateCase": "error",
				"noConfusingLabels": "error",
				"noSelfCompare": "error",
				"noExportsInTest": "error",
				"noTemplateCurlyInString": "error",
				"noVar": "error"
			},
			"style": {
				"useForOf": "error",
				"useThrowOnlyError": "error",
				"useDefaultParameterLast": "off", // it doesn't find some cases where eslint rule does
				"useConsistentBuiltinInstantiation": "error",
				"useBlockStatements": "error",
				"noNestedTernary": "error"
			},
			"security": {
				"noGlobalEval": "error"
			}
		}
	}
}
